
{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation template that contains a Lambda function behind an API Gateway that has two stages mapped to two Lambda alias",

  "Parameters":{
    "BuildOutputBucket": {
      "Type": "AWS::S3::Bucket"
    }
  },

  "Resources": {

    "Lambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code":{
          "ZipFile": { "Fn::Join": ["\n", [
               "import logginga",
               "import os",
               "import yaml",
               "import pprint",

               "from utils.helpers import Helpersmport mport os",
               "from utils.helpers import Helpersmport os",
               
               

               "def handler(event, context):",
                   "logger = Helpers.setup_logging(context.aws_request_id)",
                   "config = configuration()",

                   "pprint.pprint(config)",

    "logger.info('This is being invoked from AWS account: {0}'.format( Helpers.aws_account_id()))",

                  "return {'Success': True}",


                  "if __name__ == '__main__':",
                  "from utils.localcontext import LocalContext",
                  "handler(None, LocalContext())"
          ]]},
        "Description": "A Lambada function",
        "FunctionName": "Lambda",
        "Handler": "index.handler",
        "Role": { "Fn::GetAtt": ["LambdaExecutionRole", "Arn"]},
        "Runtime": "nodejs12.x"
      }
    },

    "LambdaStageAlias": {
      "Type" : "AWS::Lambda::Alias",
      "Properties" : {
        "FunctionName" : {"Ref": "Lambda"},
        "FunctionVersion" : "$LATEST",
        "Name" : "STAGE"
      }
    },

    "LambdaProdAlias": {
      "Type" : "AWS::Lambda::Alias",
      "Properties" : {
        "FunctionName" : {"Ref": "Lambda"},
        "FunctionVersion" : "$LATEST",
        "Name" : "PROD"
      }
    },

    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": ["lambda.amazonaws.com"] },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"]
      }
    },

    "Api": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": " API",
        "Description": "API used for  requests",
        "FailOnWarnings" : true
      }
    },

    "LambdaStagePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Ref": "LambdaStageAlias"},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["",
          ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "Api"}, "/*"]
        ]}
      }
    },

    "LambdaProdPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Ref": "LambdaProdAlias"},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["",
          ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "Api"}, "/*"]
        ]}
      }
    },

    "LambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["Lambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "Api"}, "/*"]]}
      }
    },

    "ApiGatewayCloudWatchLogsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": ["apigateway.amazonaws.com"] },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [{
          "PolicyName": "ApiGatewayLogsPolicy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
                "logs:GetLogEvents",
                "logs:FilterLogEvents"
              ],
              "Resource": "*"
            }]
          }
        }]
      }
    },

    "ApiGatewayAccount": {
      "Type" : "AWS::ApiGateway::Account",
      "Properties" : {
        "CloudWatchRoleArn" : {"Fn::GetAtt" : ["ApiGatewayCloudWatchLogsRole", "Arn"] }
      }
    },

    "ApiStageStage": {
      "DependsOn" : ["ApiGatewayAccount"],
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {"Ref": "ApiDeployment"},
        "MethodSettings": [{
          "DataTraceEnabled": true,
          "HttpMethod": "*",
          "LoggingLevel": "INFO",
          "ResourcePath": "/*"
        }],
        "RestApiId": {"Ref": "Api"},
        "StageName": "stage",
        "Variables": {
          "LambdaAlias": "STAGE"
        }
      }
    },

    "ApiProdStage": {
      "DependsOn" : ["ApiGatewayAccount"],
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {"Ref": "ApiDeployment"},
        "MethodSettings": [{
          "DataTraceEnabled": true,
          "HttpMethod": "*",
          "LoggingLevel": "INFO",
          "ResourcePath": "/*"
        }],
        "RestApiId": {"Ref": "Api"},
        "StageName": "prod",
        "Variables": {
          "LambdaAlias": "PROD"
        }
      }
    },

    "ApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": ["Request"],
      "Properties": {
        "RestApiId": {"Ref": "Api"},
        "StageName": "DummyStage"
      }
    },

    "Resource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {"Ref": "Api"},
        "ParentId": {"Fn::GetAtt": ["Api", "RootResourceId"]},
        "PathPart": "greeting"
      }
    },

    "Request": {
      "DependsOn": "LambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join" : ["",
            ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["Lambda", "Arn"]}, ":${stageVariables.LambdaAlias}", "/invocations"]
          ]},
          "IntegrationResponses": [{
            "StatusCode": 200
          }],
          "RequestTemplates": {
            "application/json": {"Fn::Join" : ["", [
              "{",
              "  \"name\": \"$input.params('name')\"",
              "}"
            ]]}
          }
        },
        "RequestParameters": {
          "method.request.querystring.name": false
        },
        "ResourceId": {"Ref": "Resource"},
        "RestApiId": {"Ref": "Api"},
        "MethodResponses": [{
          "StatusCode": 200
        }]
      }
    }
  },

  "Outputs": {
    "ProdUrl": {
      "Description": "Prod URL of the API gateway",
      "Value": {"Fn::Join": ["",
        ["https://", {"Ref": "Api"}, ".execute-api.", {"Ref": "AWS::Region"}, ".amazonaws.com/","prod/greeting"]
      ]}
    },
    "StageUrl": {
      "Description": "Stage URL of the API gateway",
      "Value": {"Fn::Join": ["",
        ["https://", {"Ref": "Api"}, ".execute-api.", {"Ref": "AWS::Region"}, ".amazonaws.com/","stage/greeting"]
      ]}
    }
  }
}
